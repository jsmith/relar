diff --git a/node_modules/esinstall/lib/rollup-plugins/rollup-plugin-wrap-install-targets.js b/node_modules/esinstall/lib/rollup-plugins/rollup-plugin-wrap-install-targets.js
index 1a60911..07bfcff 100644
--- a/node_modules/esinstall/lib/rollup-plugins/rollup-plugin-wrap-install-targets.js
+++ b/node_modules/esinstall/lib/rollup-plugins/rollup-plugin-wrap-install-targets.js
@@ -55,7 +55,7 @@ function rollupPluginWrapInstallTargets(isTreeshake, autoDetectPackageExports, i
                 return;
             }
             // Collect and filter all properties of the object as named exports.
-            return Object.keys(mod).filter((imp) => imp !== 'default');
+            return Object.keys(mod).filter((imp) => imp !== 'default' && imp !== '__esModule');
         }
         catch (err) {
             logger.debug(`âœ˜ Runtime CJS auto-detection for ${colors.bold(normalizedFileLoc)} unsuccessful. Falling back to static analysis. ${err.message}`);
@@ -78,7 +78,7 @@ function rollupPluginWrapInstallTargets(isTreeshake, autoDetectPackageExports, i
         try {
             const { exports, reexports } = cjs_module_lexer_1.default(fileContents);
             const resolvedReexports = reexports.map((e) => cjsAutoDetectExportsStatic(require.resolve(e, { paths: [path_1.default.dirname(filename)] }), visited));
-            return Array.from(new Set([...exports, ...resolvedReexports])).filter((imp) => imp !== 'default');
+            return Array.from(new Set([...exports, ...resolvedReexports])).filter((imp) => imp !== 'default' && imp !== '__esModule');
         }
         catch (err) {
             // Safe to ignore, this is usually due to the file not being CJS.
