rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // FIXME add unit tests
    match /user_data/{userId} {
      function isUser() {
      	return userId == request.auth.uid
      }
      
      function affectedKeys() {
        return request.resource.data.diff(resource.data).affectedKeys();
      }

      function newKeys() {
        return request.resource.data.keys();
      }

    	match /{data=**} {
        // restricted this so that users can't just write willy nilly
      	allow read: if isUser()
      }

      match /songs/{songId} {
				function validUpdate() {
          // Just check top level keys
          return (
            affectedKeys().hasOnly([
              'lastPlayed',
              'played',
              'liked',
              'downloadUrl',
              'artwork',
              'whenLiked',
              'title',
              'artist',
              'albumArtist',
              'albumName',
              'genre',
              'year',
              'track',
              'disk',
              'updatedAt',
            ]) && 
            affectedKeys().hasAll(['updatedAt']) &&
            debug(request.resource.data.title).size() > 0
          )
        }

      	allow update: if isUser() && validUpdate()
      }

      match /playlists/{playlistId} {
        allow update: if isUser() && affectedKeys().hasOnly(['name', 'songs', 'deleted', 'updatedAt']) && affectedKeys().hasAll(['updatedAt'])
        allow create: if isUser() && newKeys().hasAll(['name', 'createdAt', 'id', 'songs', 'updatedAt', 'deleted'])
      }

      match /feedback/{feedbackId} {
        allow create: if isUser()
      }
    }
  }
}
