rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /user_data/{userId} {
      function isUser() {
      	return userId == request.auth.uid
      }
      
      function affectedKeys() {
        return request.resource.data.diff(resource.data).affectedKeys();
      }

      function newKeys() {
        return request.resource.data.keys();
      }

    	match /{data=**} {
        // restricted this so that users can't just write willy nilly
      	allow read: if isUser()
      }

      // TODO enforce createdAt
      
      match /songs/{songId} {
				function validUpdate() {
          // artwork is slightly insecure since we really only want to allow updates to "artwork.artworkDownloadUrl32"
          return affectedKeys().hasOnly(['lastPlayed', 'played', 'liked', 'downloadUrl', 'artwork', 'whenLiked', 'updatedAt', 'deleted']) && affectedKeys().hasAll(['updatedAt'])
        }

        // function conformsToSchema() {
        //   // TODO
        //   request.resource.data.
        // }
        
      	allow update: if isUser() && validUpdate()
      }

      match /albums/{albumId} {
        function validUpdate() {
          return affectedKeys().hasOnly(['artwork']) && affectedKeys().hasAll(['updatedAt'])
        }

        allow update: if isUser() && validUpdate()
      }

      match /playlists/{playlistId} {
        allow update: if isUser() && affectedKeys().hasOnly(['name', 'songs', 'deleted', 'updatedAt']) && affectedKeys().hasAll(['updatedAt'])
        allow create: if isUser() && newKeys().hasAll(['name', 'createdAt', 'id', 'songs', 'updatedAt', 'deleted'])
      }

      match /feedback/{feedbackId} {
        allow create: if isUser()
      }
    }
  }
}
